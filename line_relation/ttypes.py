#
# Autogenerated by Thrift Compiler (0.16.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys

from thrift.transport import TTransport
all_structs = []


class AddFriendByMidRequest(object):
    """
    Attributes:
     - reqSeq
     - userMid
     - tracking

    """


    def __init__(self, reqSeq=None, userMid=None, tracking=None,):
        self.reqSeq = reqSeq
        self.userMid = userMid
        self.tracking = tracking

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.reqSeq = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.userMid = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.tracking = AddFriendTracking()
                    self.tracking.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('AddFriendByMidRequest')
        if self.reqSeq is not None:
            oprot.writeFieldBegin('reqSeq', TType.I32, 1)
            oprot.writeI32(self.reqSeq)
            oprot.writeFieldEnd()
        if self.userMid is not None:
            oprot.writeFieldBegin('userMid', TType.STRING, 2)
            oprot.writeString(self.userMid.encode('utf-8') if sys.version_info[0] == 2 else self.userMid)
            oprot.writeFieldEnd()
        if self.tracking is not None:
            oprot.writeFieldBegin('tracking', TType.STRUCT, 3)
            self.tracking.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class AddFriendTracking(object):
    """
    Attributes:
     - reference
     - trackingMeta

    """


    def __init__(self, reference=None, trackingMeta=None,):
        self.reference = reference
        self.trackingMeta = trackingMeta

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.reference = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.trackingMeta = TrackingMeta()
                    self.trackingMeta.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('AddFriendTracking')
        if self.reference is not None:
            oprot.writeFieldBegin('reference', TType.STRING, 1)
            oprot.writeString(self.reference.encode('utf-8') if sys.version_info[0] == 2 else self.reference)
            oprot.writeFieldEnd()
        if self.trackingMeta is not None:
            oprot.writeFieldBegin('trackingMeta', TType.STRUCT, 2)
            self.trackingMeta.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TrackingMeta(object):
    """
    Attributes:
     - bySearchId
     - byUserTicket
     - groupMemberList
     - friendRecommendation
     - shareContact
     - mentionInChat

    """


    def __init__(self, bySearchId=None, byUserTicket=None, groupMemberList=None, friendRecommendation=None, shareContact=None, mentionInChat=None,):
        self.bySearchId = bySearchId
        self.byUserTicket = byUserTicket
        self.groupMemberList = groupMemberList
        self.friendRecommendation = friendRecommendation
        self.shareContact = shareContact
        self.mentionInChat = mentionInChat

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 3:
                if ftype == TType.STRUCT:
                    self.bySearchId = AddMetaBySearchId()
                    self.bySearchId.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.byUserTicket = AddMetaByUserTicket()
                    self.byUserTicket.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRUCT:
                    self.groupMemberList = AddMetaGroupMemberList()
                    self.groupMemberList.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.STRUCT:
                    self.friendRecommendation = AddMetaFriendRecommendation()
                    self.friendRecommendation.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.STRUCT:
                    self.shareContact = AddMetaShareContact()
                    self.shareContact.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 15:
                if ftype == TType.STRUCT:
                    self.mentionInChat = AddMetaMentionInChat()
                    self.mentionInChat.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TrackingMeta')
        if self.bySearchId is not None:
            oprot.writeFieldBegin('bySearchId', TType.STRUCT, 3)
            self.bySearchId.write(oprot)
            oprot.writeFieldEnd()
        if self.byUserTicket is not None:
            oprot.writeFieldBegin('byUserTicket', TType.STRUCT, 4)
            self.byUserTicket.write(oprot)
            oprot.writeFieldEnd()
        if self.groupMemberList is not None:
            oprot.writeFieldBegin('groupMemberList', TType.STRUCT, 5)
            self.groupMemberList.write(oprot)
            oprot.writeFieldEnd()
        if self.friendRecommendation is not None:
            oprot.writeFieldBegin('friendRecommendation', TType.STRUCT, 10)
            self.friendRecommendation.write(oprot)
            oprot.writeFieldEnd()
        if self.shareContact is not None:
            oprot.writeFieldBegin('shareContact', TType.STRUCT, 12)
            self.shareContact.write(oprot)
            oprot.writeFieldEnd()
        if self.mentionInChat is not None:
            oprot.writeFieldBegin('mentionInChat', TType.STRUCT, 15)
            self.mentionInChat.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class AddMetaBySearchId(object):
    """
    Attributes:
     - searchId

    """


    def __init__(self, searchId=None,):
        self.searchId = searchId

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.searchId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('AddMetaBySearchId')
        if self.searchId is not None:
            oprot.writeFieldBegin('searchId', TType.STRING, 1)
            oprot.writeString(self.searchId.encode('utf-8') if sys.version_info[0] == 2 else self.searchId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class AddMetaByUserTicket(object):
    """
    Attributes:
     - ticket

    """


    def __init__(self, ticket=None,):
        self.ticket = ticket

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.ticket = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('AddMetaByUserTicket')
        if self.ticket is not None:
            oprot.writeFieldBegin('ticket', TType.STRING, 1)
            oprot.writeString(self.ticket.encode('utf-8') if sys.version_info[0] == 2 else self.ticket)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class AddMetaGroupMemberList(object):
    """
    Attributes:
     - chatMid

    """


    def __init__(self, chatMid=None,):
        self.chatMid = chatMid

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.chatMid = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('AddMetaGroupMemberList')
        if self.chatMid is not None:
            oprot.writeFieldBegin('chatMid', TType.STRING, 1)
            oprot.writeString(self.chatMid.encode('utf-8') if sys.version_info[0] == 2 else self.chatMid)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class AddMetaFriendRecommendation(object):


    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('AddMetaFriendRecommendation')
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class AddMetaShareContact(object):
    """
    Attributes:
     - messageId
     - chatMid
     - senderMid

    """


    def __init__(self, messageId=None, chatMid=None, senderMid=None,):
        self.messageId = messageId
        self.chatMid = chatMid
        self.senderMid = senderMid

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.messageId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.chatMid = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.senderMid = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('AddMetaShareContact')
        if self.messageId is not None:
            oprot.writeFieldBegin('messageId', TType.STRING, 1)
            oprot.writeString(self.messageId.encode('utf-8') if sys.version_info[0] == 2 else self.messageId)
            oprot.writeFieldEnd()
        if self.chatMid is not None:
            oprot.writeFieldBegin('chatMid', TType.STRING, 2)
            oprot.writeString(self.chatMid.encode('utf-8') if sys.version_info[0] == 2 else self.chatMid)
            oprot.writeFieldEnd()
        if self.senderMid is not None:
            oprot.writeFieldBegin('senderMid', TType.STRING, 3)
            oprot.writeString(self.senderMid.encode('utf-8') if sys.version_info[0] == 2 else self.senderMid)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class AddMetaMentionInChat(object):
    """
    Attributes:
     - messageId
     - chatMid

    """


    def __init__(self, messageId=None, chatMid=None,):
        self.messageId = messageId
        self.chatMid = chatMid

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.messageId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.chatMid = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('AddMetaMentionInChat')
        if self.messageId is not None:
            oprot.writeFieldBegin('messageId', TType.STRING, 1)
            oprot.writeString(self.messageId.encode('utf-8') if sys.version_info[0] == 2 else self.messageId)
            oprot.writeFieldEnd()
        if self.chatMid is not None:
            oprot.writeFieldBegin('chatMid', TType.STRING, 2)
            oprot.writeString(self.chatMid.encode('utf-8') if sys.version_info[0] == 2 else self.chatMid)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class GetContactV3Target(object):
    """
    Attributes:
     - targetUserMid

    """


    def __init__(self, targetUserMid=None,):
        self.targetUserMid = targetUserMid

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.targetUserMid = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('GetContactV3Target')
        if self.targetUserMid is not None:
            oprot.writeFieldBegin('targetUserMid', TType.STRING, 1)
            oprot.writeString(self.targetUserMid.encode('utf-8') if sys.version_info[0] == 2 else self.targetUserMid)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class GetContactsV3Request(object):
    """
    Attributes:
     - targetUsers
     - syncReason
     - checkUserStatusStrictly

    """


    def __init__(self, targetUsers=None, syncReason=None, checkUserStatusStrictly=None,):
        self.targetUsers = targetUsers
        self.syncReason = syncReason
        self.checkUserStatusStrictly = checkUserStatusStrictly

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.targetUsers = []
                    (_etype3, _size0) = iprot.readListBegin()
                    for _i4 in range(_size0):
                        _elem5 = GetContactV3Target()
                        _elem5.read(iprot)
                        self.targetUsers.append(_elem5)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.syncReason = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.BOOL:
                    self.checkUserStatusStrictly = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('GetContactsV3Request')
        if self.targetUsers is not None:
            oprot.writeFieldBegin('targetUsers', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.targetUsers))
            for iter6 in self.targetUsers:
                iter6.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.syncReason is not None:
            oprot.writeFieldBegin('syncReason', TType.I32, 2)
            oprot.writeI32(self.syncReason)
            oprot.writeFieldEnd()
        if self.checkUserStatusStrictly is not None:
            oprot.writeFieldBegin('checkUserStatusStrictly', TType.BOOL, 3)
            oprot.writeBool(self.checkUserStatusStrictly)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class GetContactsV3Responses(object):
    """
    Attributes:
     - responses

    """


    def __init__(self, responses=None,):
        self.responses = responses

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.responses = []
                    (_etype10, _size7) = iprot.readListBegin()
                    for _i11 in range(_size7):
                        _elem12 = GetContactsV3Response()
                        _elem12.read(iprot)
                        self.responses.append(_elem12)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('GetContactsV3Responses')
        if self.responses is not None:
            oprot.writeFieldBegin('responses', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.responses))
            for iter13 in self.responses:
                iter13.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class GetContactsV3Response(object):
    """
    Attributes:
     - targetUserMid
     - userType
     - targetProfileDetail
     - friendDetail
     - blockDetail
     - recommendationDetail

    """


    def __init__(self, targetUserMid=None, userType=None, targetProfileDetail=None, friendDetail=None, blockDetail=None, recommendationDetail=None,):
        self.targetUserMid = targetUserMid
        self.userType = userType
        self.targetProfileDetail = targetProfileDetail
        self.friendDetail = friendDetail
        self.blockDetail = blockDetail
        self.recommendationDetail = recommendationDetail

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.targetUserMid = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.userType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.targetProfileDetail = TargetProfileDetail()
                    self.targetProfileDetail.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.friendDetail = FriendDetail()
                    self.friendDetail.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRUCT:
                    self.blockDetail = BlockDetail()
                    self.blockDetail.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRUCT:
                    self.recommendationDetail = RecommendationDetail()
                    self.recommendationDetail.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('GetContactsV3Response')
        if self.targetUserMid is not None:
            oprot.writeFieldBegin('targetUserMid', TType.STRING, 1)
            oprot.writeString(self.targetUserMid.encode('utf-8') if sys.version_info[0] == 2 else self.targetUserMid)
            oprot.writeFieldEnd()
        if self.userType is not None:
            oprot.writeFieldBegin('userType', TType.I32, 2)
            oprot.writeI32(self.userType)
            oprot.writeFieldEnd()
        if self.targetProfileDetail is not None:
            oprot.writeFieldBegin('targetProfileDetail', TType.STRUCT, 3)
            self.targetProfileDetail.write(oprot)
            oprot.writeFieldEnd()
        if self.friendDetail is not None:
            oprot.writeFieldBegin('friendDetail', TType.STRUCT, 4)
            self.friendDetail.write(oprot)
            oprot.writeFieldEnd()
        if self.blockDetail is not None:
            oprot.writeFieldBegin('blockDetail', TType.STRUCT, 5)
            self.blockDetail.write(oprot)
            oprot.writeFieldEnd()
        if self.recommendationDetail is not None:
            oprot.writeFieldBegin('recommendationDetail', TType.STRUCT, 6)
            self.recommendationDetail.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TargetProfileDetail(object):
    """
    Attributes:
     - snapshotTimeMillis
     - profileName
     - picturePath
     - statusMessage
     - musicProfile
     - videoProfile
     - avatarProfile
     - pictureSource
     - pictureStatus

    """


    def __init__(self, snapshotTimeMillis=None, profileName=None, picturePath=None, statusMessage=None, musicProfile=None, videoProfile=None, avatarProfile=None, pictureSource=None, pictureStatus=None,):
        self.snapshotTimeMillis = snapshotTimeMillis
        self.profileName = profileName
        self.picturePath = picturePath
        self.statusMessage = statusMessage
        self.musicProfile = musicProfile
        self.videoProfile = videoProfile
        self.avatarProfile = avatarProfile
        self.pictureSource = pictureSource
        self.pictureStatus = pictureStatus

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.snapshotTimeMillis = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.profileName = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.picturePath = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.statusMessage = RichString()
                    self.statusMessage.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.musicProfile = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.videoProfile = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRUCT:
                    self.avatarProfile = AvatarProfile()
                    self.avatarProfile.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.I32:
                    self.pictureSource = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.STRING:
                    self.pictureStatus = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TargetProfileDetail')
        if self.snapshotTimeMillis is not None:
            oprot.writeFieldBegin('snapshotTimeMillis', TType.I64, 1)
            oprot.writeI64(self.snapshotTimeMillis)
            oprot.writeFieldEnd()
        if self.profileName is not None:
            oprot.writeFieldBegin('profileName', TType.STRING, 2)
            oprot.writeString(self.profileName.encode('utf-8') if sys.version_info[0] == 2 else self.profileName)
            oprot.writeFieldEnd()
        if self.picturePath is not None:
            oprot.writeFieldBegin('picturePath', TType.STRING, 3)
            oprot.writeString(self.picturePath.encode('utf-8') if sys.version_info[0] == 2 else self.picturePath)
            oprot.writeFieldEnd()
        if self.statusMessage is not None:
            oprot.writeFieldBegin('statusMessage', TType.STRUCT, 4)
            self.statusMessage.write(oprot)
            oprot.writeFieldEnd()
        if self.musicProfile is not None:
            oprot.writeFieldBegin('musicProfile', TType.STRING, 5)
            oprot.writeString(self.musicProfile.encode('utf-8') if sys.version_info[0] == 2 else self.musicProfile)
            oprot.writeFieldEnd()
        if self.videoProfile is not None:
            oprot.writeFieldBegin('videoProfile', TType.STRING, 6)
            oprot.writeString(self.videoProfile.encode('utf-8') if sys.version_info[0] == 2 else self.videoProfile)
            oprot.writeFieldEnd()
        if self.avatarProfile is not None:
            oprot.writeFieldBegin('avatarProfile', TType.STRUCT, 7)
            self.avatarProfile.write(oprot)
            oprot.writeFieldEnd()
        if self.pictureSource is not None:
            oprot.writeFieldBegin('pictureSource', TType.I32, 8)
            oprot.writeI32(self.pictureSource)
            oprot.writeFieldEnd()
        if self.pictureStatus is not None:
            oprot.writeFieldBegin('pictureStatus', TType.STRING, 9)
            oprot.writeString(self.pictureStatus.encode('utf-8') if sys.version_info[0] == 2 else self.pictureStatus)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class RichString(object):
    """
    Attributes:
     - content
     - meta

    """


    def __init__(self, content=None, meta=None,):
        self.content = content
        self.meta = meta

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.content = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.MAP:
                    self.meta = {}
                    (_ktype15, _vtype16, _size14) = iprot.readMapBegin()
                    for _i18 in range(_size14):
                        _key19 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        _val20 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        self.meta[_key19] = _val20
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('RichString')
        if self.content is not None:
            oprot.writeFieldBegin('content', TType.STRING, 1)
            oprot.writeString(self.content.encode('utf-8') if sys.version_info[0] == 2 else self.content)
            oprot.writeFieldEnd()
        if self.meta is not None:
            oprot.writeFieldBegin('meta', TType.MAP, 2)
            oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.meta))
            for kiter21, viter22 in self.meta.items():
                oprot.writeString(kiter21.encode('utf-8') if sys.version_info[0] == 2 else kiter21)
                oprot.writeString(viter22.encode('utf-8') if sys.version_info[0] == 2 else viter22)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class FriendDetail(object):
    """
    Attributes:
     - user
     - bot
     - notFriend

    """


    def __init__(self, user=None, bot=None, notFriend=None,):
        self.user = user
        self.bot = bot
        self.notFriend = notFriend

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.user = UserFriendDetail()
                    self.user.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.bot = BotFriendDetail()
                    self.bot.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.notFriend = NotFriend()
                    self.notFriend.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('FriendDetail')
        if self.user is not None:
            oprot.writeFieldBegin('user', TType.STRUCT, 1)
            self.user.write(oprot)
            oprot.writeFieldEnd()
        if self.bot is not None:
            oprot.writeFieldBegin('bot', TType.STRUCT, 2)
            self.bot.write(oprot)
            oprot.writeFieldEnd()
        if self.notFriend is not None:
            oprot.writeFieldBegin('notFriend', TType.STRUCT, 3)
            self.notFriend.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class UserFriendDetail(object):
    """
    Attributes:
     - createdTime
     - overriddenName
     - favoriteTime
     - hidden
     - ringtone
     - ringbackTone

    """


    def __init__(self, createdTime=None, overriddenName=None, favoriteTime=None, hidden=None, ringtone=None, ringbackTone=None,):
        self.createdTime = createdTime
        self.overriddenName = overriddenName
        self.favoriteTime = favoriteTime
        self.hidden = hidden
        self.ringtone = ringtone
        self.ringbackTone = ringbackTone

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.createdTime = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.overriddenName = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I64:
                    self.favoriteTime = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.BOOL:
                    self.hidden = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.ringtone = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRING:
                    self.ringbackTone = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('UserFriendDetail')
        if self.createdTime is not None:
            oprot.writeFieldBegin('createdTime', TType.I64, 1)
            oprot.writeI64(self.createdTime)
            oprot.writeFieldEnd()
        if self.overriddenName is not None:
            oprot.writeFieldBegin('overriddenName', TType.STRING, 3)
            oprot.writeString(self.overriddenName.encode('utf-8') if sys.version_info[0] == 2 else self.overriddenName)
            oprot.writeFieldEnd()
        if self.favoriteTime is not None:
            oprot.writeFieldBegin('favoriteTime', TType.I64, 4)
            oprot.writeI64(self.favoriteTime)
            oprot.writeFieldEnd()
        if self.hidden is not None:
            oprot.writeFieldBegin('hidden', TType.BOOL, 6)
            oprot.writeBool(self.hidden)
            oprot.writeFieldEnd()
        if self.ringtone is not None:
            oprot.writeFieldBegin('ringtone', TType.STRING, 7)
            oprot.writeString(self.ringtone.encode('utf-8') if sys.version_info[0] == 2 else self.ringtone)
            oprot.writeFieldEnd()
        if self.ringbackTone is not None:
            oprot.writeFieldBegin('ringbackTone', TType.STRING, 8)
            oprot.writeString(self.ringbackTone.encode('utf-8') if sys.version_info[0] == 2 else self.ringbackTone)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class BotFriendDetail(object):
    """
    Attributes:
     - createdTime
     - favoriteTime
     - hidden

    """


    def __init__(self, createdTime=None, favoriteTime=None, hidden=None,):
        self.createdTime = createdTime
        self.favoriteTime = favoriteTime
        self.hidden = hidden

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.createdTime = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I64:
                    self.favoriteTime = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.BOOL:
                    self.hidden = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('BotFriendDetail')
        if self.createdTime is not None:
            oprot.writeFieldBegin('createdTime', TType.I64, 1)
            oprot.writeI64(self.createdTime)
            oprot.writeFieldEnd()
        if self.favoriteTime is not None:
            oprot.writeFieldBegin('favoriteTime', TType.I64, 4)
            oprot.writeI64(self.favoriteTime)
            oprot.writeFieldEnd()
        if self.hidden is not None:
            oprot.writeFieldBegin('hidden', TType.BOOL, 6)
            oprot.writeBool(self.hidden)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class NotFriend(object):


    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('NotFriend')
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class BlockDetail(object):
    """
    Attributes:
     - user
     - bot
     - notBlocked

    """


    def __init__(self, user=None, bot=None, notBlocked=None,):
        self.user = user
        self.bot = bot
        self.notBlocked = notBlocked

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.user = UserBlockDetail()
                    self.user.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.bot = BotBlockDetail()
                    self.bot.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.notBlocked = NotBlocked()
                    self.notBlocked.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('BlockDetail')
        if self.user is not None:
            oprot.writeFieldBegin('user', TType.STRUCT, 1)
            self.user.write(oprot)
            oprot.writeFieldEnd()
        if self.bot is not None:
            oprot.writeFieldBegin('bot', TType.STRUCT, 2)
            self.bot.write(oprot)
            oprot.writeFieldEnd()
        if self.notBlocked is not None:
            oprot.writeFieldBegin('notBlocked', TType.STRUCT, 3)
            self.notBlocked.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class UserBlockDetail(object):
    """
    Attributes:
     - deletedFromBlockList

    """


    def __init__(self, deletedFromBlockList=None,):
        self.deletedFromBlockList = deletedFromBlockList

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 3:
                if ftype == TType.BOOL:
                    self.deletedFromBlockList = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('UserBlockDetail')
        if self.deletedFromBlockList is not None:
            oprot.writeFieldBegin('deletedFromBlockList', TType.BOOL, 3)
            oprot.writeBool(self.deletedFromBlockList)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class BotBlockDetail(object):
    """
    Attributes:
     - deletedFromBlockList

    """


    def __init__(self, deletedFromBlockList=None,):
        self.deletedFromBlockList = deletedFromBlockList

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 3:
                if ftype == TType.BOOL:
                    self.deletedFromBlockList = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('BotBlockDetail')
        if self.deletedFromBlockList is not None:
            oprot.writeFieldBegin('deletedFromBlockList', TType.BOOL, 3)
            oprot.writeBool(self.deletedFromBlockList)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class NotBlocked(object):


    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('NotBlocked')
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class RecommendationDetail(object):
    """
    Attributes:
     - recommendationDetail
     - notRecommended

    """


    def __init__(self, recommendationDetail=None, notRecommended=None,):
        self.recommendationDetail = recommendationDetail
        self.notRecommended = notRecommended

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.recommendationDetail = RecommendationDetailMore()
                    self.recommendationDetail.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.notRecommended = NotRecommended()
                    self.notRecommended.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('RecommendationDetail')
        if self.recommendationDetail is not None:
            oprot.writeFieldBegin('recommendationDetail', TType.STRUCT, 1)
            self.recommendationDetail.write(oprot)
            oprot.writeFieldEnd()
        if self.notRecommended is not None:
            oprot.writeFieldBegin('notRecommended', TType.STRUCT, 2)
            self.notRecommended.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class RecommendationDetailMore(object):
    """
    Attributes:
     - createdTime
     - reasons
     - hidden

    """


    def __init__(self, createdTime=None, reasons=None, hidden=None,):
        self.createdTime = createdTime
        self.reasons = reasons
        self.hidden = hidden

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.createdTime = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.reasons = []
                    (_etype26, _size23) = iprot.readListBegin()
                    for _i27 in range(_size23):
                        _elem28 = RecommendationReason()
                        _elem28.read(iprot)
                        self.reasons.append(_elem28)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.BOOL:
                    self.hidden = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('RecommendationDetailMore')
        if self.createdTime is not None:
            oprot.writeFieldBegin('createdTime', TType.I64, 1)
            oprot.writeI64(self.createdTime)
            oprot.writeFieldEnd()
        if self.reasons is not None:
            oprot.writeFieldBegin('reasons', TType.LIST, 2)
            oprot.writeListBegin(TType.STRUCT, len(self.reasons))
            for iter29 in self.reasons:
                iter29.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.hidden is not None:
            oprot.writeFieldBegin('hidden', TType.BOOL, 4)
            oprot.writeBool(self.hidden)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class NotRecommended(object):


    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('NotRecommended')
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class RecommendationReason(object):
    """
    Attributes:
     - sharedChat
     - reverseFriendByUserId
     - reverseFriendByQrCode
     - reverseFriendByPhone

    """


    def __init__(self, sharedChat=None, reverseFriendByUserId=None, reverseFriendByQrCode=None, reverseFriendByPhone=None,):
        self.sharedChat = sharedChat
        self.reverseFriendByUserId = reverseFriendByUserId
        self.reverseFriendByQrCode = reverseFriendByQrCode
        self.reverseFriendByPhone = reverseFriendByPhone

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.sharedChat = RecommendationReasonSharedChat()
                    self.sharedChat.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.reverseFriendByUserId = RecommendationReasonReverseFriendByUserId()
                    self.reverseFriendByUserId.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.reverseFriendByQrCode = RecommendationReasonReverseFriendByQRCode()
                    self.reverseFriendByQrCode.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.reverseFriendByPhone = RecommendationReasonReverseFriendByPhone()
                    self.reverseFriendByPhone.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('RecommendationReason')
        if self.sharedChat is not None:
            oprot.writeFieldBegin('sharedChat', TType.STRUCT, 1)
            self.sharedChat.write(oprot)
            oprot.writeFieldEnd()
        if self.reverseFriendByUserId is not None:
            oprot.writeFieldBegin('reverseFriendByUserId', TType.STRUCT, 2)
            self.reverseFriendByUserId.write(oprot)
            oprot.writeFieldEnd()
        if self.reverseFriendByQrCode is not None:
            oprot.writeFieldBegin('reverseFriendByQrCode', TType.STRUCT, 3)
            self.reverseFriendByQrCode.write(oprot)
            oprot.writeFieldEnd()
        if self.reverseFriendByPhone is not None:
            oprot.writeFieldBegin('reverseFriendByPhone', TType.STRUCT, 4)
            self.reverseFriendByPhone.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class RecommendationReasonSharedChat(object):
    """
    Attributes:
     - chatMid

    """


    def __init__(self, chatMid=None,):
        self.chatMid = chatMid

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.chatMid = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('RecommendationReasonSharedChat')
        if self.chatMid is not None:
            oprot.writeFieldBegin('chatMid', TType.STRING, 1)
            oprot.writeString(self.chatMid.encode('utf-8') if sys.version_info[0] == 2 else self.chatMid)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class RecommendationReasonReverseFriendByUserId(object):


    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('RecommendationReasonReverseFriendByUserId')
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class RecommendationReasonReverseFriendByQRCode(object):


    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('RecommendationReasonReverseFriendByQRCode')
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class RecommendationReasonReverseFriendByPhone(object):


    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('RecommendationReasonReverseFriendByPhone')
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class AvatarProfile(object):
    """
    Attributes:
     - version
     - updatedMillis
     - thumbnail
     - usablePublicly

    """


    def __init__(self, version=None, updatedMillis=None, thumbnail=None, usablePublicly=None,):
        self.version = version
        self.updatedMillis = updatedMillis
        self.thumbnail = thumbnail
        self.usablePublicly = usablePublicly

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.version = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.updatedMillis = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.thumbnail = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.BOOL:
                    self.usablePublicly = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('AvatarProfile')
        if self.version is not None:
            oprot.writeFieldBegin('version', TType.STRING, 1)
            oprot.writeString(self.version.encode('utf-8') if sys.version_info[0] == 2 else self.version)
            oprot.writeFieldEnd()
        if self.updatedMillis is not None:
            oprot.writeFieldBegin('updatedMillis', TType.I64, 2)
            oprot.writeI64(self.updatedMillis)
            oprot.writeFieldEnd()
        if self.thumbnail is not None:
            oprot.writeFieldBegin('thumbnail', TType.STRING, 3)
            oprot.writeString(self.thumbnail.encode('utf-8') if sys.version_info[0] == 2 else self.thumbnail)
            oprot.writeFieldEnd()
        if self.usablePublicly is not None:
            oprot.writeFieldBegin('usablePublicly', TType.BOOL, 4)
            oprot.writeBool(self.usablePublicly)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class RejectedException(TException):
    """
    Attributes:
     - rejectionReason
     - hint

    """


    def __init__(self, rejectionReason=None, hint=None,):
        super(RejectedException, self).__setattr__('rejectionReason', rejectionReason)
        super(RejectedException, self).__setattr__('hint', hint)

    def __setattr__(self, *args):
        raise TypeError("can't modify immutable instance")

    def __delattr__(self, *args):
        raise TypeError("can't modify immutable instance")

    def __hash__(self):
        return hash(self.__class__) ^ hash((self.rejectionReason, self.hint, ))

    @classmethod
    def read(cls, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and cls.thrift_spec is not None:
            return iprot._fast_decode(None, iprot, [cls, cls.thrift_spec])
        iprot.readStructBegin()
        rejectionReason = None
        hint = None
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    rejectionReason = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    hint = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        return cls(
            rejectionReason=rejectionReason,
            hint=hint,
        )

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('RejectedException')
        if self.rejectionReason is not None:
            oprot.writeFieldBegin('rejectionReason', TType.I32, 1)
            oprot.writeI32(self.rejectionReason)
            oprot.writeFieldEnd()
        if self.hint is not None:
            oprot.writeFieldBegin('hint', TType.STRING, 2)
            oprot.writeString(self.hint.encode('utf-8') if sys.version_info[0] == 2 else self.hint)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __str__(self):
        return repr(self)

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ServerFailureException(TException):
    """
    Attributes:
     - hint

    """


    def __init__(self, hint=None,):
        super(ServerFailureException, self).__setattr__('hint', hint)

    def __setattr__(self, *args):
        raise TypeError("can't modify immutable instance")

    def __delattr__(self, *args):
        raise TypeError("can't modify immutable instance")

    def __hash__(self):
        return hash(self.__class__) ^ hash((self.hint, ))

    @classmethod
    def read(cls, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and cls.thrift_spec is not None:
            return iprot._fast_decode(None, iprot, [cls, cls.thrift_spec])
        iprot.readStructBegin()
        hint = None
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    hint = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        return cls(
            hint=hint,
        )

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ServerFailureException')
        if self.hint is not None:
            oprot.writeFieldBegin('hint', TType.STRING, 1)
            oprot.writeString(self.hint.encode('utf-8') if sys.version_info[0] == 2 else self.hint)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __str__(self):
        return repr(self)

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ExcessiveRequestItemException(TException):
    """
    Attributes:
     - max_size
     - hint

    """


    def __init__(self, max_size=None, hint=None,):
        super(ExcessiveRequestItemException, self).__setattr__('max_size', max_size)
        super(ExcessiveRequestItemException, self).__setattr__('hint', hint)

    def __setattr__(self, *args):
        raise TypeError("can't modify immutable instance")

    def __delattr__(self, *args):
        raise TypeError("can't modify immutable instance")

    def __hash__(self):
        return hash(self.__class__) ^ hash((self.max_size, self.hint, ))

    @classmethod
    def read(cls, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and cls.thrift_spec is not None:
            return iprot._fast_decode(None, iprot, [cls, cls.thrift_spec])
        iprot.readStructBegin()
        max_size = None
        hint = None
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    max_size = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    hint = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        return cls(
            max_size=max_size,
            hint=hint,
        )

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ExcessiveRequestItemException')
        if self.max_size is not None:
            oprot.writeFieldBegin('max_size', TType.I64, 1)
            oprot.writeI64(self.max_size)
            oprot.writeFieldEnd()
        if self.hint is not None:
            oprot.writeFieldBegin('hint', TType.STRING, 2)
            oprot.writeString(self.hint.encode('utf-8') if sys.version_info[0] == 2 else self.hint)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __str__(self):
        return repr(self)

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TalkException(TException):
    """
    Attributes:
     - code
     - reason
     - parameterMap

    """


    def __init__(self, code=None, reason=None, parameterMap=None,):
        super(TalkException, self).__setattr__('code', code)
        super(TalkException, self).__setattr__('reason', reason)
        super(TalkException, self).__setattr__('parameterMap', parameterMap)

    def __setattr__(self, *args):
        raise TypeError("can't modify immutable instance")

    def __delattr__(self, *args):
        raise TypeError("can't modify immutable instance")

    def __hash__(self):
        return hash(self.__class__) ^ hash((self.code, self.reason, self.parameterMap, ))

    @classmethod
    def read(cls, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and cls.thrift_spec is not None:
            return iprot._fast_decode(None, iprot, [cls, cls.thrift_spec])
        iprot.readStructBegin()
        code = None
        reason = None
        parameterMap = None
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    code = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    reason = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.MAP:
                    parameterMap = {}
                    (_ktype31, _vtype32, _size30) = iprot.readMapBegin()
                    for _i34 in range(_size30):
                        _key35 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        _val36 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        parameterMap[_key35] = _val36
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        return cls(
            code=code,
            reason=reason,
            parameterMap=parameterMap,
        )

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TalkException')
        if self.code is not None:
            oprot.writeFieldBegin('code', TType.I32, 1)
            oprot.writeI32(self.code)
            oprot.writeFieldEnd()
        if self.reason is not None:
            oprot.writeFieldBegin('reason', TType.STRING, 2)
            oprot.writeString(self.reason.encode('utf-8') if sys.version_info[0] == 2 else self.reason)
            oprot.writeFieldEnd()
        if self.parameterMap is not None:
            oprot.writeFieldBegin('parameterMap', TType.MAP, 3)
            oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.parameterMap))
            for kiter37, viter38 in self.parameterMap.items():
                oprot.writeString(kiter37.encode('utf-8') if sys.version_info[0] == 2 else kiter37)
                oprot.writeString(viter38.encode('utf-8') if sys.version_info[0] == 2 else viter38)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __str__(self):
        return repr(self)

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(AddFriendByMidRequest)
AddFriendByMidRequest.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'reqSeq', None, None, ),  # 1
    (2, TType.STRING, 'userMid', 'UTF8', None, ),  # 2
    (3, TType.STRUCT, 'tracking', [AddFriendTracking, None], None, ),  # 3
)
all_structs.append(AddFriendTracking)
AddFriendTracking.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'reference', 'UTF8', None, ),  # 1
    (2, TType.STRUCT, 'trackingMeta', [TrackingMeta, None], None, ),  # 2
)
all_structs.append(TrackingMeta)
TrackingMeta.thrift_spec = (
    None,  # 0
    None,  # 1
    None,  # 2
    (3, TType.STRUCT, 'bySearchId', [AddMetaBySearchId, None], None, ),  # 3
    (4, TType.STRUCT, 'byUserTicket', [AddMetaByUserTicket, None], None, ),  # 4
    (5, TType.STRUCT, 'groupMemberList', [AddMetaGroupMemberList, None], None, ),  # 5
    None,  # 6
    None,  # 7
    None,  # 8
    None,  # 9
    (10, TType.STRUCT, 'friendRecommendation', [AddMetaFriendRecommendation, None], None, ),  # 10
    None,  # 11
    (12, TType.STRUCT, 'shareContact', [AddMetaShareContact, None], None, ),  # 12
    None,  # 13
    None,  # 14
    (15, TType.STRUCT, 'mentionInChat', [AddMetaMentionInChat, None], None, ),  # 15
)
all_structs.append(AddMetaBySearchId)
AddMetaBySearchId.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'searchId', 'UTF8', None, ),  # 1
)
all_structs.append(AddMetaByUserTicket)
AddMetaByUserTicket.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'ticket', 'UTF8', None, ),  # 1
)
all_structs.append(AddMetaGroupMemberList)
AddMetaGroupMemberList.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'chatMid', 'UTF8', None, ),  # 1
)
all_structs.append(AddMetaFriendRecommendation)
AddMetaFriendRecommendation.thrift_spec = (
)
all_structs.append(AddMetaShareContact)
AddMetaShareContact.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'messageId', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'chatMid', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'senderMid', 'UTF8', None, ),  # 3
)
all_structs.append(AddMetaMentionInChat)
AddMetaMentionInChat.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'messageId', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'chatMid', 'UTF8', None, ),  # 2
)
all_structs.append(GetContactV3Target)
GetContactV3Target.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'targetUserMid', 'UTF8', None, ),  # 1
)
all_structs.append(GetContactsV3Request)
GetContactsV3Request.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'targetUsers', (TType.STRUCT, [GetContactV3Target, None], False), None, ),  # 1
    (2, TType.I32, 'syncReason', None, None, ),  # 2
    (3, TType.BOOL, 'checkUserStatusStrictly', None, None, ),  # 3
)
all_structs.append(GetContactsV3Responses)
GetContactsV3Responses.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'responses', (TType.STRUCT, [GetContactsV3Response, None], False), None, ),  # 1
)
all_structs.append(GetContactsV3Response)
GetContactsV3Response.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'targetUserMid', 'UTF8', None, ),  # 1
    (2, TType.I32, 'userType', None, None, ),  # 2
    (3, TType.STRUCT, 'targetProfileDetail', [TargetProfileDetail, None], None, ),  # 3
    (4, TType.STRUCT, 'friendDetail', [FriendDetail, None], None, ),  # 4
    (5, TType.STRUCT, 'blockDetail', [BlockDetail, None], None, ),  # 5
    (6, TType.STRUCT, 'recommendationDetail', [RecommendationDetail, None], None, ),  # 6
)
all_structs.append(TargetProfileDetail)
TargetProfileDetail.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'snapshotTimeMillis', None, None, ),  # 1
    (2, TType.STRING, 'profileName', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'picturePath', 'UTF8', None, ),  # 3
    (4, TType.STRUCT, 'statusMessage', [RichString, None], None, ),  # 4
    (5, TType.STRING, 'musicProfile', 'UTF8', None, ),  # 5
    (6, TType.STRING, 'videoProfile', 'UTF8', None, ),  # 6
    (7, TType.STRUCT, 'avatarProfile', [AvatarProfile, None], None, ),  # 7
    (8, TType.I32, 'pictureSource', None, None, ),  # 8
    (9, TType.STRING, 'pictureStatus', 'UTF8', None, ),  # 9
)
all_structs.append(RichString)
RichString.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'content', 'UTF8', None, ),  # 1
    (2, TType.MAP, 'meta', (TType.STRING, 'UTF8', TType.STRING, 'UTF8', False), None, ),  # 2
)
all_structs.append(FriendDetail)
FriendDetail.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'user', [UserFriendDetail, None], None, ),  # 1
    (2, TType.STRUCT, 'bot', [BotFriendDetail, None], None, ),  # 2
    (3, TType.STRUCT, 'notFriend', [NotFriend, None], None, ),  # 3
)
all_structs.append(UserFriendDetail)
UserFriendDetail.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'createdTime', None, None, ),  # 1
    None,  # 2
    (3, TType.STRING, 'overriddenName', 'UTF8', None, ),  # 3
    (4, TType.I64, 'favoriteTime', None, None, ),  # 4
    None,  # 5
    (6, TType.BOOL, 'hidden', None, None, ),  # 6
    (7, TType.STRING, 'ringtone', 'UTF8', None, ),  # 7
    (8, TType.STRING, 'ringbackTone', 'UTF8', None, ),  # 8
)
all_structs.append(BotFriendDetail)
BotFriendDetail.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'createdTime', None, None, ),  # 1
    None,  # 2
    None,  # 3
    (4, TType.I64, 'favoriteTime', None, None, ),  # 4
    None,  # 5
    (6, TType.BOOL, 'hidden', None, None, ),  # 6
)
all_structs.append(NotFriend)
NotFriend.thrift_spec = (
)
all_structs.append(BlockDetail)
BlockDetail.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'user', [UserBlockDetail, None], None, ),  # 1
    (2, TType.STRUCT, 'bot', [BotBlockDetail, None], None, ),  # 2
    (3, TType.STRUCT, 'notBlocked', [NotBlocked, None], None, ),  # 3
)
all_structs.append(UserBlockDetail)
UserBlockDetail.thrift_spec = (
    None,  # 0
    None,  # 1
    None,  # 2
    (3, TType.BOOL, 'deletedFromBlockList', None, None, ),  # 3
)
all_structs.append(BotBlockDetail)
BotBlockDetail.thrift_spec = (
    None,  # 0
    None,  # 1
    None,  # 2
    (3, TType.BOOL, 'deletedFromBlockList', None, None, ),  # 3
)
all_structs.append(NotBlocked)
NotBlocked.thrift_spec = (
)
all_structs.append(RecommendationDetail)
RecommendationDetail.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'recommendationDetail', [RecommendationDetailMore, None], None, ),  # 1
    (2, TType.STRUCT, 'notRecommended', [NotRecommended, None], None, ),  # 2
)
all_structs.append(RecommendationDetailMore)
RecommendationDetailMore.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'createdTime', None, None, ),  # 1
    (2, TType.LIST, 'reasons', (TType.STRUCT, [RecommendationReason, None], False), None, ),  # 2
    None,  # 3
    (4, TType.BOOL, 'hidden', None, None, ),  # 4
)
all_structs.append(NotRecommended)
NotRecommended.thrift_spec = (
)
all_structs.append(RecommendationReason)
RecommendationReason.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'sharedChat', [RecommendationReasonSharedChat, None], None, ),  # 1
    (2, TType.STRUCT, 'reverseFriendByUserId', [RecommendationReasonReverseFriendByUserId, None], None, ),  # 2
    (3, TType.STRUCT, 'reverseFriendByQrCode', [RecommendationReasonReverseFriendByQRCode, None], None, ),  # 3
    (4, TType.STRUCT, 'reverseFriendByPhone', [RecommendationReasonReverseFriendByPhone, None], None, ),  # 4
)
all_structs.append(RecommendationReasonSharedChat)
RecommendationReasonSharedChat.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'chatMid', 'UTF8', None, ),  # 1
)
all_structs.append(RecommendationReasonReverseFriendByUserId)
RecommendationReasonReverseFriendByUserId.thrift_spec = (
)
all_structs.append(RecommendationReasonReverseFriendByQRCode)
RecommendationReasonReverseFriendByQRCode.thrift_spec = (
)
all_structs.append(RecommendationReasonReverseFriendByPhone)
RecommendationReasonReverseFriendByPhone.thrift_spec = (
)
all_structs.append(AvatarProfile)
AvatarProfile.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'version', 'UTF8', None, ),  # 1
    (2, TType.I64, 'updatedMillis', None, None, ),  # 2
    (3, TType.STRING, 'thumbnail', 'UTF8', None, ),  # 3
    (4, TType.BOOL, 'usablePublicly', None, None, ),  # 4
)
all_structs.append(RejectedException)
RejectedException.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'rejectionReason', None, None, ),  # 1
    (2, TType.STRING, 'hint', 'UTF8', None, ),  # 2
)
all_structs.append(ServerFailureException)
ServerFailureException.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'hint', 'UTF8', None, ),  # 1
)
all_structs.append(ExcessiveRequestItemException)
ExcessiveRequestItemException.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'max_size', None, None, ),  # 1
    (2, TType.STRING, 'hint', 'UTF8', None, ),  # 2
)
all_structs.append(TalkException)
TalkException.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'code', None, None, ),  # 1
    (2, TType.STRING, 'reason', 'UTF8', None, ),  # 2
    (3, TType.MAP, 'parameterMap', (TType.STRING, 'UTF8', TType.STRING, 'UTF8', False), None, ),  # 3
)
fix_spec(all_structs)
del all_structs
