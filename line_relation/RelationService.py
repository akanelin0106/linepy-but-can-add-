#
# Autogenerated by Thrift Compiler (0.16.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys
import logging
from .ttypes import *
from thrift.Thrift import TProcessor
from thrift.transport import TTransport
all_structs = []


class Iface(object):
    def addFriendByMid(self, request):
        """
        Parameters:
         - request

        """
        pass

    def getContactsV3(self, request):
        """
        Parameters:
         - request

        """
        pass


class Client(Iface):
    def __init__(self, iprot, oprot=None):
        self._iprot = self._oprot = iprot
        if oprot is not None:
            self._oprot = oprot
        self._seqid = 0

    def addFriendByMid(self, request):
        """
        Parameters:
         - request

        """
        self.send_addFriendByMid(request)
        self.recv_addFriendByMid()

    def send_addFriendByMid(self, request):
        self._oprot.writeMessageBegin('addFriendByMid', TMessageType.CALL, self._seqid)
        args = addFriendByMid_args()
        args.request = request
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_addFriendByMid(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = addFriendByMid_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.re is not None:
            raise result.re
        if result.se is not None:
            raise result.se
        if result.te is not None:
            raise result.te
        return

    def getContactsV3(self, request):
        """
        Parameters:
         - request

        """
        self.send_getContactsV3(request)
        return self.recv_getContactsV3()

    def send_getContactsV3(self, request):
        self._oprot.writeMessageBegin('getContactsV3', TMessageType.CALL, self._seqid)
        args = getContactsV3_args()
        args.request = request
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_getContactsV3(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = getContactsV3_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.re is not None:
            raise result.re
        if result.ce is not None:
            raise result.ce
        if result.te is not None:
            raise result.te
        if result.ere is not None:
            raise result.ere
        raise TApplicationException(TApplicationException.MISSING_RESULT, "getContactsV3 failed: unknown result")


class Processor(Iface, TProcessor):
    def __init__(self, handler):
        self._handler = handler
        self._processMap = {}
        self._processMap["addFriendByMid"] = Processor.process_addFriendByMid
        self._processMap["getContactsV3"] = Processor.process_getContactsV3
        self._on_message_begin = None

    def on_message_begin(self, func):
        self._on_message_begin = func

    def process(self, iprot, oprot):
        (name, type, seqid) = iprot.readMessageBegin()
        if self._on_message_begin:
            self._on_message_begin(name, type, seqid)
        if name not in self._processMap:
            iprot.skip(TType.STRUCT)
            iprot.readMessageEnd()
            x = TApplicationException(TApplicationException.UNKNOWN_METHOD, 'Unknown function %s' % (name))
            oprot.writeMessageBegin(name, TMessageType.EXCEPTION, seqid)
            x.write(oprot)
            oprot.writeMessageEnd()
            oprot.trans.flush()
            return
        else:
            self._processMap[name](self, seqid, iprot, oprot)
        return True

    def process_addFriendByMid(self, seqid, iprot, oprot):
        args = addFriendByMid_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = addFriendByMid_result()
        try:
            self._handler.addFriendByMid(args.request)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except RejectedException as re:
            msg_type = TMessageType.REPLY
            result.re = re
        except ServerFailureException as se:
            msg_type = TMessageType.REPLY
            result.se = se
        except TalkException as te:
            msg_type = TMessageType.REPLY
            result.te = te
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("addFriendByMid", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_getContactsV3(self, seqid, iprot, oprot):
        args = getContactsV3_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = getContactsV3_result()
        try:
            result.success = self._handler.getContactsV3(args.request)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except RejectedException as re:
            msg_type = TMessageType.REPLY
            result.re = re
        except ServerFailureException as ce:
            msg_type = TMessageType.REPLY
            result.ce = ce
        except TalkException as te:
            msg_type = TMessageType.REPLY
            result.te = te
        except ExcessiveRequestItemException as ere:
            msg_type = TMessageType.REPLY
            result.ere = ere
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("getContactsV3", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

# HELPER FUNCTIONS AND STRUCTURES


class addFriendByMid_args(object):
    """
    Attributes:
     - request

    """


    def __init__(self, request=None,):
        self.request = request

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.request = AddFriendByMidRequest()
                    self.request.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('addFriendByMid_args')
        if self.request is not None:
            oprot.writeFieldBegin('request', TType.STRUCT, 1)
            self.request.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(addFriendByMid_args)
addFriendByMid_args.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'request', [AddFriendByMidRequest, None], None, ),  # 1
)


class addFriendByMid_result(object):
    """
    Attributes:
     - re
     - se
     - te

    """


    def __init__(self, re=None, se=None, te=None,):
        self.re = re
        self.se = se
        self.te = te

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.re = RejectedException.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.se = ServerFailureException.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.te = TalkException.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('addFriendByMid_result')
        if self.re is not None:
            oprot.writeFieldBegin('re', TType.STRUCT, 1)
            self.re.write(oprot)
            oprot.writeFieldEnd()
        if self.se is not None:
            oprot.writeFieldBegin('se', TType.STRUCT, 2)
            self.se.write(oprot)
            oprot.writeFieldEnd()
        if self.te is not None:
            oprot.writeFieldBegin('te', TType.STRUCT, 3)
            self.te.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(addFriendByMid_result)
addFriendByMid_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 're', [RejectedException, None], None, ),  # 1
    (2, TType.STRUCT, 'se', [ServerFailureException, None], None, ),  # 2
    (3, TType.STRUCT, 'te', [TalkException, None], None, ),  # 3
)


class getContactsV3_args(object):
    """
    Attributes:
     - request

    """


    def __init__(self, request=None,):
        self.request = request

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.request = GetContactsV3Request()
                    self.request.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('getContactsV3_args')
        if self.request is not None:
            oprot.writeFieldBegin('request', TType.STRUCT, 1)
            self.request.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(getContactsV3_args)
getContactsV3_args.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'request', [GetContactsV3Request, None], None, ),  # 1
)


class getContactsV3_result(object):
    """
    Attributes:
     - success
     - re
     - ce
     - te
     - ere

    """


    def __init__(self, success=None, re=None, ce=None, te=None, ere=None,):
        self.success = success
        self.re = re
        self.ce = ce
        self.te = te
        self.ere = ere

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = GetContactsV3Responses()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.re = RejectedException.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.ce = ServerFailureException.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.te = TalkException.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.ere = ExcessiveRequestItemException.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('getContactsV3_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.re is not None:
            oprot.writeFieldBegin('re', TType.STRUCT, 1)
            self.re.write(oprot)
            oprot.writeFieldEnd()
        if self.ce is not None:
            oprot.writeFieldBegin('ce', TType.STRUCT, 2)
            self.ce.write(oprot)
            oprot.writeFieldEnd()
        if self.te is not None:
            oprot.writeFieldBegin('te', TType.STRUCT, 3)
            self.te.write(oprot)
            oprot.writeFieldEnd()
        if self.ere is not None:
            oprot.writeFieldBegin('ere', TType.STRUCT, 4)
            self.ere.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(getContactsV3_result)
getContactsV3_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [GetContactsV3Responses, None], None, ),  # 0
    (1, TType.STRUCT, 're', [RejectedException, None], None, ),  # 1
    (2, TType.STRUCT, 'ce', [ServerFailureException, None], None, ),  # 2
    (3, TType.STRUCT, 'te', [TalkException, None], None, ),  # 3
    (4, TType.STRUCT, 'ere', [ExcessiveRequestItemException, None], None, ),  # 4
)
fix_spec(all_structs)
del all_structs
